package #(modelDaoPackageName);

import com.jfinal.plugin.activerecord.Model;
import com.jfinal.plugin.activerecord.Page;

import #(modelPackageName).*;
import #(modelPackageName).bean.#(tableMeta.modelName)Bean;
import com.jfinal.plugin.activerecord.Table;

import java.util.ArrayList;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class #(tableMeta.modelName)Dao {

    static final Object[] NULL_PARA_ARRAY = new Object[0];

    // --------------------------------- 普通 查询 find ---------------------------------
    public List<#(tableMeta.modelName)Bean> find(String sql) {
        List<#(tableMeta.modelName)> modelList = #(tableMeta.modelName).dao.find(sql);
        return modelListToBean(modelList);
    }

    public List<#(tableMeta.modelName)Bean> find(String sql, Object... paras) {
        List<#(tableMeta.modelName)> modelList = #(tableMeta.modelName).dao.find(sql, paras);
        return modelListToBean(modelList);
    }
    
    
    // --------------------------------- 主键 查询 findById ---------------------------------
    public #(tableMeta.modelName)Bean findById(Object idValue) {
        #(tableMeta.modelName) model = #(tableMeta.modelName).dao.findById(idValue);
        return modelToBean(model);
    }

    public #(tableMeta.modelName)Bean findById(Object... idValues) {
        #(tableMeta.modelName) model = #(tableMeta.modelName).dao.findById(idValues);
        return modelToBean(model);
    }

    // --------------------------------- 主键 查询 指定某列或某几列 ---------------------------------
    public #(tableMeta.modelName)Bean findByIdLoadColumns(Object idValue, String columns) {
        #(tableMeta.modelName) model = #(tableMeta.modelName).dao.findByIdLoadColumns(new Object[]{idValue}, columns);
        return modelToBean(model);
    }

    public #(tableMeta.modelName)Bean findByIdLoadColumns(Object[] idValues, String columns) {
        #(tableMeta.modelName) model = #(tableMeta.modelName).dao.findByIdLoadColumns(idValues, columns);
        return modelToBean(model);
    }

    // --------------------------------- 查询 第一条 findFirst ---------------------------------
    public #(tableMeta.modelName)Bean findFirst(String sql) {
        #(tableMeta.modelName) model = #(tableMeta.modelName).dao.findFirst(sql, NULL_PARA_ARRAY);
        return modelToBean(model);
    }

    public #(tableMeta.modelName)Bean findFirst(String sql, Object... paras) {
        #(tableMeta.modelName) model = #(tableMeta.modelName).dao.findFirst(sql, paras);
        return modelToBean(model);
    }

    // --------------------------------- 分页 查询 paginate ---------------------------------
    public Page<#(tableMeta.modelName)Bean> paginate(int pageNumber, int pageSize, String select, String sqlExceptSelect) {
        Page<#(tableMeta.modelName)> pageModel = #(tableMeta.modelName).dao.paginate(pageNumber, pageSize, select, sqlExceptSelect, NULL_PARA_ARRAY);
        return pageModelToBean(pageModel);
    }

    public Page<#(tableMeta.modelName)Bean> paginate(int pageNumber, int pageSize, String select, String sqlExceptSelect, Object... paras) {
        Page<#(tableMeta.modelName)> pageModel = #(tableMeta.modelName).dao.paginate(pageNumber, pageSize, null, select, sqlExceptSelect, paras);
        return pageModelToBean(pageModel);
    }

    public Page<#(tableMeta.modelName)Bean> paginate(int pageNumber, int pageSize, boolean isGroupBySql, String select, String sqlExceptSelect, Object... paras) {
        #(tableMeta.modelName) model = new #(tableMeta.modelName)();
        Page<#(tableMeta.modelName)> pageModel = #(tableMeta.modelName).dao.paginate(pageNumber, pageSize, isGroupBySql, select, sqlExceptSelect, paras);
        return pageModelToBean(pageModel);
    }

    public Page<#(tableMeta.modelName)Bean> paginateByFullSql(int pageNumber, int pageSize, String totalRowSql, String findSql, Object... paras) {
        #(tableMeta.modelName) model = new #(tableMeta.modelName)();
        Page<#(tableMeta.modelName)> pageModel = #(tableMeta.modelName).dao.paginateByFullSql(pageNumber, pageSize, null, totalRowSql, findSql, paras);
        return pageModelToBean(pageModel);
    }

    public Page<#(tableMeta.modelName)Bean> paginateByFullSql(int pageNumber, int pageSize, boolean isGroupBySql, String totalRowSql, String findSql, Object... paras) {
        Page<#(tableMeta.modelName)> pageModel = #(tableMeta.modelName).dao.paginateByFullSql(pageNumber, pageSize, isGroupBySql, totalRowSql, findSql, paras);
        return pageModelToBean(pageModel);

    }

    // --------------------------------- 插入 save ---------------------------------
    public boolean save(#(tableMeta.modelName)Bean bean) {
        // model --> bean ,用 bean 调用save（）方法
        #(tableMeta.modelName) model = new #(tableMeta.modelName)();
        model.beanToModel(bean);
        return model.save();
    }

    // --------------------------------- 删除 delete ---------------------------------
    public boolean delete(#(tableMeta.modelName)Bean bean) {
        #(tableMeta.modelName) model = new #(tableMeta.modelName)();
        model.beanToModel(bean);
        return model.delete();
    }
    // --------------------------------- 主键 删除 delete ---------------------------------
    public boolean deleteById(#(tableMeta.modelName)Bean bean, Object idValue) {
        #(tableMeta.modelName) model = new #(tableMeta.modelName)();
        model.beanToModel(bean);
        return model.deleteById(idValue);
    }

    public boolean deleteById(#(tableMeta.modelName)Bean bean, Object... idValues) {
        #(tableMeta.modelName) model = new #(tableMeta.modelName)();
        model.beanToModel(bean);
        return model.deleteById(idValues);
    }

    // --------------------------------- 更新 update ---------------------------------

    public boolean update(#(tableMeta.modelName)Bean bean) {
        #(tableMeta.modelName) model = new #(tableMeta.modelName)();
        model.beanToModel(bean);
        return model.update();
    }

    // --------------------------------- 查询结果 model 转 bean ---------------------------------
    private #(tableMeta.modelName)Bean modelToBean(#(tableMeta.modelName) model) {
        #(tableMeta.modelName)Bean bean = new #(tableMeta.modelName)Bean();
        bean.modelToBean(model);
        return bean;
    }

    private List<#(tableMeta.modelName)Bean> modelListToBean(List<#(tableMeta.modelName)> modelList) {
        List<#(tableMeta.modelName)Bean> beanList = new ArrayList<#(tableMeta.modelName)Bean>();
        for (#(tableMeta.modelName) model : modelList) {
            #(tableMeta.modelName)Bean bean = new #(tableMeta.modelName)Bean();
            bean.modelToBean(model);
            beanList.add(bean);
        }
        return beanList;
    }

    private Page<#(tableMeta.modelName)Bean> pageModelToBean(Page<#(tableMeta.modelName)> pageModel) {
        //获取 查询结果的 Map内容
        List<#(tableMeta.modelName)> modelList = pageModel.getList();
        List<#(tableMeta.modelName)Bean> beanList = modelListToBean(modelList);
        //创建 新的返回对象
        return new Page<>(beanList, pageModel.getPageNumber(), pageModel.getPageSize(), pageModel.getTotalPage(), pageModel.getTotalRow());
    }

}

