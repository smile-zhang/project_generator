package com.drew.model.dao;

import com.jfinal.plugin.activerecord.Model;
import com.jfinal.plugin.activerecord.Page;

import com.drew.model.*;
import com.drew.model.bean.BookBean;
import com.jfinal.plugin.activerecord.Table;

import java.util.ArrayList;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class BookDao {

    static final Object[] NULL_PARA_ARRAY = new Object[0];

    // --------------------------------- 普通 查询 find ---------------------------------
    public List<BookBean> find(String sql) {
        List<Book> modelList = Book.dao.find(sql);
        return modelListToBean(modelList);
    }

    public List<BookBean> find(String sql, Object... paras) {
        List<Book> modelList = Book.dao.find(sql, paras);
        return modelListToBean(modelList);
    }
    
    
    // --------------------------------- 主键 查询 findById ---------------------------------
    public BookBean findById(Object idValue) {
        Book model = Book.dao.findById(idValue);
        return modelToBean(model);
    }

    public BookBean findById(Object... idValues) {
        Book model = Book.dao.findById(idValues);
        return modelToBean(model);
    }

    // --------------------------------- 主键 查询 指定某列或某几列 ---------------------------------
    public BookBean findByIdLoadColumns(Object idValue, String columns) {
        Book model = Book.dao.findByIdLoadColumns(new Object[]{idValue}, columns);
        return modelToBean(model);
    }

    public BookBean findByIdLoadColumns(Object[] idValues, String columns) {
        Book model = Book.dao.findByIdLoadColumns(idValues, columns);
        return modelToBean(model);
    }

    // --------------------------------- 查询 第一条 findFirst ---------------------------------
    public BookBean findFirst(String sql) {
        Book model = Book.dao.findFirst(sql, NULL_PARA_ARRAY);
        return modelToBean(model);
    }

    public BookBean findFirst(String sql, Object... paras) {
        Book model = Book.dao.findFirst(sql, paras);
        return modelToBean(model);
    }

    // --------------------------------- 分页 查询 paginate ---------------------------------
    public Page<BookBean> paginate(int pageNumber, int pageSize, String select, String sqlExceptSelect) {
        Page<Book> pageModel = Book.dao.paginate(pageNumber, pageSize, select, sqlExceptSelect, NULL_PARA_ARRAY);
        return pageModelToBean(pageModel);
    }

    public Page<BookBean> paginate(int pageNumber, int pageSize, String select, String sqlExceptSelect, Object... paras) {
        Page<Book> pageModel = Book.dao.paginate(pageNumber, pageSize, null, select, sqlExceptSelect, paras);
        return pageModelToBean(pageModel);
    }

    public Page<BookBean> paginate(int pageNumber, int pageSize, boolean isGroupBySql, String select, String sqlExceptSelect, Object... paras) {
        Book model = new Book();
        Page<Book> pageModel = Book.dao.paginate(pageNumber, pageSize, isGroupBySql, select, sqlExceptSelect, paras);
        return pageModelToBean(pageModel);
    }

    public Page<BookBean> paginateByFullSql(int pageNumber, int pageSize, String totalRowSql, String findSql, Object... paras) {
        Book model = new Book();
        Page<Book> pageModel = Book.dao.paginateByFullSql(pageNumber, pageSize, null, totalRowSql, findSql, paras);
        return pageModelToBean(pageModel);
    }

    public Page<BookBean> paginateByFullSql(int pageNumber, int pageSize, boolean isGroupBySql, String totalRowSql, String findSql, Object... paras) {
        Page<Book> pageModel = Book.dao.paginateByFullSql(pageNumber, pageSize, isGroupBySql, totalRowSql, findSql, paras);
        return pageModelToBean(pageModel);

    }

    // --------------------------------- 插入 save ---------------------------------
    public boolean save(BookBean bean) {
        // model --> bean ,用 bean 调用save（）方法
        Book model = new Book();
        model.beanToModel(bean);
        return model.save();
    }

    // --------------------------------- 删除 delete ---------------------------------
    public boolean delete(BookBean bean) {
        Book model = new Book();
        model.beanToModel(bean);
        return model.delete();
    }
    // --------------------------------- 主键 删除 delete ---------------------------------
    public boolean deleteById(BookBean bean, Object idValue) {
        Book model = new Book();
        model.beanToModel(bean);
        return model.deleteById(idValue);
    }

    public boolean deleteById(BookBean bean, Object... idValues) {
        Book model = new Book();
        model.beanToModel(bean);
        return model.deleteById(idValues);
    }

    // --------------------------------- 更新 update ---------------------------------

    public boolean update(BookBean bean) {
        Book model = new Book();
        model.beanToModel(bean);
        return model.update();
    }

    // --------------------------------- 查询结果 model 转 bean ---------------------------------
    private BookBean modelToBean(Book model) {
        BookBean bean = new BookBean();
        bean.modelToBean(model);
        return bean;
    }

    private List<BookBean> modelListToBean(List<Book> modelList) {
        List<BookBean> beanList = new ArrayList<BookBean>();
        for (Book model : modelList) {
            BookBean bean = new BookBean();
            bean.modelToBean(model);
            beanList.add(bean);
        }
        return beanList;
    }

    private Page<BookBean> pageModelToBean(Page<Book> pageModel) {
        //获取 查询结果的 Map内容
        List<Book> modelList = pageModel.getList();
        List<BookBean> beanList = modelListToBean(modelList);
        //创建 新的返回对象
        return new Page<>(beanList, pageModel.getPageNumber(), pageModel.getPageSize(), pageModel.getTotalPage(), pageModel.getTotalRow());
    }

}
